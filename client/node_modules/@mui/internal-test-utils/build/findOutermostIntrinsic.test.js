"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const chai_1 = require("chai");
const createMount_1 = __importDefault(require("./createMount"));
const findOutermostIntrinsic_1 = __importDefault(require("./findOutermostIntrinsic"));
describe('findOutermostIntrinsic', () => {
    const mount = (0, createMount_1.default)({ strict: null });
    const expectIntrinsic = (node, expected) => {
        const wrapper = mount(node);
        const outermostIntrinsic = (0, findOutermostIntrinsic_1.default)(wrapper);
        if (expected === null) {
            (0, chai_1.expect)(outermostIntrinsic.exists()).to.equal(false);
        }
        else {
            (0, chai_1.expect)(outermostIntrinsic.type()).to.equal(expected);
            (0, chai_1.expect)(outermostIntrinsic.type()).to.equal(outermostIntrinsic.getDOMNode().nodeName.toLowerCase());
        }
    };
    const Headless = ({ children }) => children;
    it('returns immediate DOM nodes', () => {
        expectIntrinsic(React.createElement("div", null, "Hello, World!"), 'div');
    });
    it('only returns the outermost', () => {
        expectIntrinsic(React.createElement("span", null,
            React.createElement("div", null, "Hello, World!")), 'span');
    });
    it('ignores components', () => {
        expectIntrinsic(React.createElement(Headless, null,
            React.createElement("div", null, "Hello, World!")), 'div');
        expectIntrinsic(React.createElement(Headless, null,
            React.createElement(Headless, null,
                React.createElement("div", null, "Hello, World!"))), 'div');
        expectIntrinsic(React.createElement(Headless, null,
            React.createElement(Headless, null,
                React.createElement("div", null,
                    React.createElement(Headless, null,
                        React.createElement("span", null, "Hello, World!"))))), 'div');
    });
    it('can handle that no DOM node is rendered', () => {
        expectIntrinsic(React.createElement(Headless, null, false && React.createElement(Headless, null)), null);
    });
});
//# sourceMappingURL=findOutermostIntrinsic.test.js.map