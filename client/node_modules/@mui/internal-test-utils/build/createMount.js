"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-env mocha */
const React = __importStar(require("react"));
const ReactDOM = __importStar(require("react-dom"));
const ReactDOMTestUtils = __importStar(require("react-dom/test-utils"));
const enzyme_1 = require("enzyme");
/**
 * Can't just mount <React.Fragment>{node}</React.Fragment>
 * because that swallows wrapper.setProps
 *
 * why class component:
 * https://github.com/airbnb/enzyme/issues/2043
 */
// eslint-disable-next-line react/prefer-stateless-function
class Mode extends React.Component {
    render() {
        // Excess props will come from e.g. enzyme setProps
        // eslint-disable-next-line @typescript-eslint/naming-convention
        const { __element, __strict, ...other } = this.props;
        const Component = __strict ? React.StrictMode : React.Fragment;
        return React.createElement(Component, null, React.cloneElement(__element, other));
    }
}
// Generate an enhanced mount function.
function createMount(options = {}) {
    const { mount = enzyme_1.mount, strict: globalStrict = true, ...globalEnzymeOptions } = options;
    let container = null;
    function computeTestName(test) {
        let current = test;
        const titles = [];
        while (current != null) {
            titles.push(current.title);
            current = current.parent;
        }
        return titles.filter(Boolean).reverse().join(' -> ');
    }
    // save stack to re-use in test-hooks
    const { stack: createMountStack } = new Error();
    /**
     * Flag whether `createMount` was called in a suite i.e. describe() block.
     * For legacy reasons `createMount` might accidentally be called in a before(Each) hook.
     */
    let wasCalledInSuite = false;
    before(() => {
        wasCalledInSuite = true;
    });
    beforeEach(() => {
        if (!wasCalledInSuite) {
            const error = new Error('Unable to run `before` hook for `createMount`. This usually indicates that `createMount` was called in a `before` hook instead of in a `describe()` block.');
            error.stack = createMountStack;
            throw error;
        }
    });
    beforeEach(function beforeEachMountTest() {
        container = document.createElement('div');
        container.setAttribute('data-test', computeTestName(this.currentTest));
        document.body.insertBefore(container, document.body.firstChild);
    });
    afterEach(() => {
        ReactDOMTestUtils.act(() => {
            // eslint-disable-next-line react/no-deprecated
            ReactDOM.unmountComponentAtNode(container);
        });
        container.parentElement.removeChild(container);
        container = null;
    });
    const mountWithContext = function mountWithContext(node, localOptions = {}) {
        const { strict = globalStrict, ...localEnzymeOptions } = localOptions;
        if (container === null) {
            throw new Error(`Tried to mount without setup. Mounting inside before() is not allowed. Try mounting in beforeEach or better: in each test`);
        }
        ReactDOMTestUtils.act(() => {
            // eslint-disable-next-line react/no-deprecated
            ReactDOM.unmountComponentAtNode(container);
        });
        // some tests require that no other components are in the tree
        // for example when doing .instance(), .state() etc.
        const wrapper = mount(strict == null ? node : React.createElement(Mode, { __element: node, __strict: Boolean(strict) }), {
            attachTo: container,
            ...globalEnzymeOptions,
            ...localEnzymeOptions,
        });
        const originalUnmount = wrapper.unmount;
        wrapper.unmount = () => {
            // flush effect cleanup functions
            ReactDOMTestUtils.act(() => {
                originalUnmount.call(wrapper);
            });
            return wrapper;
        };
        return wrapper;
    };
    return mountWithContext;
}
exports.default = createMount;
//# sourceMappingURL=createMount.js.map