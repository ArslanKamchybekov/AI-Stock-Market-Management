"use strict";

// Extracted from https://github.com/facebook/react/blob/7bdf93b17a35a5d8fcf0ceae0bf48ed5e6b16688/src/renderers/shared/fiber/ReactFiberTreeReflection.js#L104-L228
function findCurrentFiberUsingSlowPath(fiber) {
  var alternate = fiber.alternate;

  if (!alternate) {
    return fiber;
  } // If we have two possible branches, we'll walk backwards up to the root
  // to see what path the root points to. On the way we may hit one of the
  // special cases and we'll deal with them.


  var a = fiber;
  var b = alternate;

  while (true) {
    // eslint-disable-line
    var parentA = a["return"];
    var parentB = parentA ? parentA.alternate : null;

    if (!parentA || !parentB) {
      // We're at the root.
      break;
    } // If both copies of the parent fiber point to the same child, we can
    // assume that the child is current. This happens when we bailout on low
    // priority: the bailed out fiber's child reuses the current child.


    if (parentA.child === parentB.child) {
      var child = parentA.child;

      while (child) {
        if (child === a) {
          // We've determined that A is the current branch.
          return fiber;
        }

        if (child === b) {
          // We've determined that B is the current branch.
          return alternate;
        }

        child = child.sibling;
      } // We should never have an alternate for any mounting node. So the only
      // way this could possibly happen is if this was unmounted, if at all.


      throw new Error('Unable to find node on an unmounted component.');
    }

    if (a["return"] !== b["return"]) {
      // The return pointer of A and the return pointer of B point to different
      // fibers. We assume that return pointers never criss-cross, so A must
      // belong to the child set of A.return, and B must belong to the child
      // set of B.return.
      a = parentA;
      b = parentB;
    } else {
      // The return pointers point to the same fiber. We'll have to use the
      // default, slow path: scan the child sets of each parent alternate to see
      // which child belongs to which set.
      //
      // Search parent A's child set
      var didFindChild = false;
      var _child = parentA.child;

      while (_child) {
        if (_child === a) {
          didFindChild = true;
          a = parentA;
          b = parentB;
          break;
        }

        if (_child === b) {
          didFindChild = true;
          b = parentA;
          a = parentB;
          break;
        }

        _child = _child.sibling;
      }

      if (!didFindChild) {
        // Search parent B's child set
        _child = parentB.child;

        while (_child) {
          if (_child === a) {
            didFindChild = true;
            a = parentB;
            b = parentA;
            break;
          }

          if (_child === b) {
            didFindChild = true;
            b = parentB;
            a = parentA;
            break;
          }

          _child = _child.sibling;
        }

        if (!didFindChild) {
          throw new Error('Child was not found in either parent set. This indicates a bug ' + 'in React related to the return pointer. Please file an issue.');
        }
      }
    }
  }

  if (a.stateNode.current === a) {
    // We've determined that A is the current branch.
    return fiber;
  } // Otherwise B has to be current branch.


  return alternate;
}

module.exports = findCurrentFiberUsingSlowPath;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmaW5kQ3VycmVudEZpYmVyVXNpbmdTbG93UGF0aCIsImZpYmVyIiwiYWx0ZXJuYXRlIiwiYSIsImIiLCJwYXJlbnRBIiwicGFyZW50QiIsImNoaWxkIiwic2libGluZyIsIkVycm9yIiwiZGlkRmluZENoaWxkIiwic3RhdGVOb2RlIiwiY3VycmVudCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi9zcmMvZmluZEN1cnJlbnRGaWJlclVzaW5nU2xvd1BhdGguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRXh0cmFjdGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvN2JkZjkzYjE3YTM1YTVkOGZjZjBjZWFlMGJmNDhlZDVlNmIxNjY4OC9zcmMvcmVuZGVyZXJzL3NoYXJlZC9maWJlci9SZWFjdEZpYmVyVHJlZVJlZmxlY3Rpb24uanMjTDEwNC1MMjI4XHJcbmZ1bmN0aW9uIGZpbmRDdXJyZW50RmliZXJVc2luZ1Nsb3dQYXRoKGZpYmVyKSB7XHJcbiAgY29uc3QgeyBhbHRlcm5hdGUgfSA9IGZpYmVyO1xyXG4gIGlmICghYWx0ZXJuYXRlKSB7XHJcbiAgICByZXR1cm4gZmliZXI7XHJcbiAgfVxyXG4gIC8vIElmIHdlIGhhdmUgdHdvIHBvc3NpYmxlIGJyYW5jaGVzLCB3ZSdsbCB3YWxrIGJhY2t3YXJkcyB1cCB0byB0aGUgcm9vdFxyXG4gIC8vIHRvIHNlZSB3aGF0IHBhdGggdGhlIHJvb3QgcG9pbnRzIHRvLiBPbiB0aGUgd2F5IHdlIG1heSBoaXQgb25lIG9mIHRoZVxyXG4gIC8vIHNwZWNpYWwgY2FzZXMgYW5kIHdlJ2xsIGRlYWwgd2l0aCB0aGVtLlxyXG4gIGxldCBhID0gZmliZXI7XHJcbiAgbGV0IGIgPSBhbHRlcm5hdGU7XHJcbiAgd2hpbGUgKHRydWUpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxyXG4gICAgY29uc3QgcGFyZW50QSA9IGEucmV0dXJuO1xyXG4gICAgY29uc3QgcGFyZW50QiA9IHBhcmVudEEgPyBwYXJlbnRBLmFsdGVybmF0ZSA6IG51bGw7XHJcbiAgICBpZiAoIXBhcmVudEEgfHwgIXBhcmVudEIpIHtcclxuICAgICAgLy8gV2UncmUgYXQgdGhlIHJvb3QuXHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIElmIGJvdGggY29waWVzIG9mIHRoZSBwYXJlbnQgZmliZXIgcG9pbnQgdG8gdGhlIHNhbWUgY2hpbGQsIHdlIGNhblxyXG4gICAgLy8gYXNzdW1lIHRoYXQgdGhlIGNoaWxkIGlzIGN1cnJlbnQuIFRoaXMgaGFwcGVucyB3aGVuIHdlIGJhaWxvdXQgb24gbG93XHJcbiAgICAvLyBwcmlvcml0eTogdGhlIGJhaWxlZCBvdXQgZmliZXIncyBjaGlsZCByZXVzZXMgdGhlIGN1cnJlbnQgY2hpbGQuXHJcbiAgICBpZiAocGFyZW50QS5jaGlsZCA9PT0gcGFyZW50Qi5jaGlsZCkge1xyXG4gICAgICBsZXQgeyBjaGlsZCB9ID0gcGFyZW50QTtcclxuICAgICAgd2hpbGUgKGNoaWxkKSB7XHJcbiAgICAgICAgaWYgKGNoaWxkID09PSBhKSB7XHJcbiAgICAgICAgICAvLyBXZSd2ZSBkZXRlcm1pbmVkIHRoYXQgQSBpcyB0aGUgY3VycmVudCBicmFuY2guXHJcbiAgICAgICAgICByZXR1cm4gZmliZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjaGlsZCA9PT0gYikge1xyXG4gICAgICAgICAgLy8gV2UndmUgZGV0ZXJtaW5lZCB0aGF0IEIgaXMgdGhlIGN1cnJlbnQgYnJhbmNoLlxyXG4gICAgICAgICAgcmV0dXJuIGFsdGVybmF0ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2hpbGQgPSBjaGlsZC5zaWJsaW5nO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIFdlIHNob3VsZCBuZXZlciBoYXZlIGFuIGFsdGVybmF0ZSBmb3IgYW55IG1vdW50aW5nIG5vZGUuIFNvIHRoZSBvbmx5XHJcbiAgICAgIC8vIHdheSB0aGlzIGNvdWxkIHBvc3NpYmx5IGhhcHBlbiBpcyBpZiB0aGlzIHdhcyB1bm1vdW50ZWQsIGlmIGF0IGFsbC5cclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gZmluZCBub2RlIG9uIGFuIHVubW91bnRlZCBjb21wb25lbnQuJyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGEucmV0dXJuICE9PSBiLnJldHVybikge1xyXG4gICAgICAvLyBUaGUgcmV0dXJuIHBvaW50ZXIgb2YgQSBhbmQgdGhlIHJldHVybiBwb2ludGVyIG9mIEIgcG9pbnQgdG8gZGlmZmVyZW50XHJcbiAgICAgIC8vIGZpYmVycy4gV2UgYXNzdW1lIHRoYXQgcmV0dXJuIHBvaW50ZXJzIG5ldmVyIGNyaXNzLWNyb3NzLCBzbyBBIG11c3RcclxuICAgICAgLy8gYmVsb25nIHRvIHRoZSBjaGlsZCBzZXQgb2YgQS5yZXR1cm4sIGFuZCBCIG11c3QgYmVsb25nIHRvIHRoZSBjaGlsZFxyXG4gICAgICAvLyBzZXQgb2YgQi5yZXR1cm4uXHJcbiAgICAgIGEgPSBwYXJlbnRBO1xyXG4gICAgICBiID0gcGFyZW50QjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIFRoZSByZXR1cm4gcG9pbnRlcnMgcG9pbnQgdG8gdGhlIHNhbWUgZmliZXIuIFdlJ2xsIGhhdmUgdG8gdXNlIHRoZVxyXG4gICAgICAvLyBkZWZhdWx0LCBzbG93IHBhdGg6IHNjYW4gdGhlIGNoaWxkIHNldHMgb2YgZWFjaCBwYXJlbnQgYWx0ZXJuYXRlIHRvIHNlZVxyXG4gICAgICAvLyB3aGljaCBjaGlsZCBiZWxvbmdzIHRvIHdoaWNoIHNldC5cclxuICAgICAgLy9cclxuICAgICAgLy8gU2VhcmNoIHBhcmVudCBBJ3MgY2hpbGQgc2V0XHJcbiAgICAgIGxldCBkaWRGaW5kQ2hpbGQgPSBmYWxzZTtcclxuICAgICAgbGV0IHsgY2hpbGQgfSA9IHBhcmVudEE7XHJcbiAgICAgIHdoaWxlIChjaGlsZCkge1xyXG4gICAgICAgIGlmIChjaGlsZCA9PT0gYSkge1xyXG4gICAgICAgICAgZGlkRmluZENoaWxkID0gdHJ1ZTtcclxuICAgICAgICAgIGEgPSBwYXJlbnRBO1xyXG4gICAgICAgICAgYiA9IHBhcmVudEI7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNoaWxkID09PSBiKSB7XHJcbiAgICAgICAgICBkaWRGaW5kQ2hpbGQgPSB0cnVlO1xyXG4gICAgICAgICAgYiA9IHBhcmVudEE7XHJcbiAgICAgICAgICBhID0gcGFyZW50QjtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjaGlsZCA9IGNoaWxkLnNpYmxpbmc7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKCFkaWRGaW5kQ2hpbGQpIHtcclxuICAgICAgICAvLyBTZWFyY2ggcGFyZW50IEIncyBjaGlsZCBzZXRcclxuICAgICAgICAoeyBjaGlsZCB9ID0gcGFyZW50Qik7XHJcbiAgICAgICAgd2hpbGUgKGNoaWxkKSB7XHJcbiAgICAgICAgICBpZiAoY2hpbGQgPT09IGEpIHtcclxuICAgICAgICAgICAgZGlkRmluZENoaWxkID0gdHJ1ZTtcclxuICAgICAgICAgICAgYSA9IHBhcmVudEI7XHJcbiAgICAgICAgICAgIGIgPSBwYXJlbnRBO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChjaGlsZCA9PT0gYikge1xyXG4gICAgICAgICAgICBkaWRGaW5kQ2hpbGQgPSB0cnVlO1xyXG4gICAgICAgICAgICBiID0gcGFyZW50QjtcclxuICAgICAgICAgICAgYSA9IHBhcmVudEE7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgY2hpbGQgPSBjaGlsZC5zaWJsaW5nO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWRpZEZpbmRDaGlsZCkge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDaGlsZCB3YXMgbm90IGZvdW5kIGluIGVpdGhlciBwYXJlbnQgc2V0LiBUaGlzIGluZGljYXRlcyBhIGJ1ZyAnXHJcbiAgICAgICAgICAgICsgJ2luIFJlYWN0IHJlbGF0ZWQgdG8gdGhlIHJldHVybiBwb2ludGVyLiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgaWYgKGEuc3RhdGVOb2RlLmN1cnJlbnQgPT09IGEpIHtcclxuICAgIC8vIFdlJ3ZlIGRldGVybWluZWQgdGhhdCBBIGlzIHRoZSBjdXJyZW50IGJyYW5jaC5cclxuICAgIHJldHVybiBmaWJlcjtcclxuICB9XHJcbiAgLy8gT3RoZXJ3aXNlIEIgaGFzIHRvIGJlIGN1cnJlbnQgYnJhbmNoLlxyXG4gIHJldHVybiBhbHRlcm5hdGU7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZmluZEN1cnJlbnRGaWJlclVzaW5nU2xvd1BhdGg7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBLFNBQVNBLDZCQUFULENBQXVDQyxLQUF2QyxFQUE4QztFQUM1QyxJQUFRQyxTQUFSLEdBQXNCRCxLQUF0QixDQUFRQyxTQUFSOztFQUNBLElBQUksQ0FBQ0EsU0FBTCxFQUFnQjtJQUNkLE9BQU9ELEtBQVA7RUFDRCxDQUoyQyxDQUs1QztFQUNBO0VBQ0E7OztFQUNBLElBQUlFLENBQUMsR0FBR0YsS0FBUjtFQUNBLElBQUlHLENBQUMsR0FBR0YsU0FBUjs7RUFDQSxPQUFPLElBQVAsRUFBYTtJQUFFO0lBQ2IsSUFBTUcsT0FBTyxHQUFHRixDQUFDLFVBQWpCO0lBQ0EsSUFBTUcsT0FBTyxHQUFHRCxPQUFPLEdBQUdBLE9BQU8sQ0FBQ0gsU0FBWCxHQUF1QixJQUE5Qzs7SUFDQSxJQUFJLENBQUNHLE9BQUQsSUFBWSxDQUFDQyxPQUFqQixFQUEwQjtNQUN4QjtNQUNBO0lBQ0QsQ0FOVSxDQVFYO0lBQ0E7SUFDQTs7O0lBQ0EsSUFBSUQsT0FBTyxDQUFDRSxLQUFSLEtBQWtCRCxPQUFPLENBQUNDLEtBQTlCLEVBQXFDO01BQ25DLElBQU1BLEtBQU4sR0FBZ0JGLE9BQWhCLENBQU1FLEtBQU47O01BQ0EsT0FBT0EsS0FBUCxFQUFjO1FBQ1osSUFBSUEsS0FBSyxLQUFLSixDQUFkLEVBQWlCO1VBQ2Y7VUFDQSxPQUFPRixLQUFQO1FBQ0Q7O1FBQ0QsSUFBSU0sS0FBSyxLQUFLSCxDQUFkLEVBQWlCO1VBQ2Y7VUFDQSxPQUFPRixTQUFQO1FBQ0Q7O1FBQ0RLLEtBQUssR0FBR0EsS0FBSyxDQUFDQyxPQUFkO01BQ0QsQ0Faa0MsQ0FhbkM7TUFDQTs7O01BQ0EsTUFBTSxJQUFJQyxLQUFKLENBQVUsZ0RBQVYsQ0FBTjtJQUNEOztJQUVELElBQUlOLENBQUMsVUFBRCxLQUFhQyxDQUFDLFVBQWxCLEVBQTJCO01BQ3pCO01BQ0E7TUFDQTtNQUNBO01BQ0FELENBQUMsR0FBR0UsT0FBSjtNQUNBRCxDQUFDLEdBQUdFLE9BQUo7SUFDRCxDQVBELE1BT087TUFDTDtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0EsSUFBSUksWUFBWSxHQUFHLEtBQW5CO01BQ0EsSUFBTUgsTUFBTixHQUFnQkYsT0FBaEIsQ0FBTUUsS0FBTjs7TUFDQSxPQUFPQSxNQUFQLEVBQWM7UUFDWixJQUFJQSxNQUFLLEtBQUtKLENBQWQsRUFBaUI7VUFDZk8sWUFBWSxHQUFHLElBQWY7VUFDQVAsQ0FBQyxHQUFHRSxPQUFKO1VBQ0FELENBQUMsR0FBR0UsT0FBSjtVQUNBO1FBQ0Q7O1FBQ0QsSUFBSUMsTUFBSyxLQUFLSCxDQUFkLEVBQWlCO1VBQ2ZNLFlBQVksR0FBRyxJQUFmO1VBQ0FOLENBQUMsR0FBR0MsT0FBSjtVQUNBRixDQUFDLEdBQUdHLE9BQUo7VUFDQTtRQUNEOztRQUNEQyxNQUFLLEdBQUdBLE1BQUssQ0FBQ0MsT0FBZDtNQUNEOztNQUNELElBQUksQ0FBQ0UsWUFBTCxFQUFtQjtRQUNqQjtRQUNHSCxNQUZjLEdBRUpELE9BRkksQ0FFZEMsS0FGYzs7UUFHakIsT0FBT0EsTUFBUCxFQUFjO1VBQ1osSUFBSUEsTUFBSyxLQUFLSixDQUFkLEVBQWlCO1lBQ2ZPLFlBQVksR0FBRyxJQUFmO1lBQ0FQLENBQUMsR0FBR0csT0FBSjtZQUNBRixDQUFDLEdBQUdDLE9BQUo7WUFDQTtVQUNEOztVQUNELElBQUlFLE1BQUssS0FBS0gsQ0FBZCxFQUFpQjtZQUNmTSxZQUFZLEdBQUcsSUFBZjtZQUNBTixDQUFDLEdBQUdFLE9BQUo7WUFDQUgsQ0FBQyxHQUFHRSxPQUFKO1lBQ0E7VUFDRDs7VUFDREUsTUFBSyxHQUFHQSxNQUFLLENBQUNDLE9BQWQ7UUFDRDs7UUFDRCxJQUFJLENBQUNFLFlBQUwsRUFBbUI7VUFDakIsTUFBTSxJQUFJRCxLQUFKLENBQVUsb0VBQ1osK0RBREUsQ0FBTjtRQUVEO01BQ0Y7SUFDRjtFQUNGOztFQUNELElBQUlOLENBQUMsQ0FBQ1EsU0FBRixDQUFZQyxPQUFaLEtBQXdCVCxDQUE1QixFQUErQjtJQUM3QjtJQUNBLE9BQU9GLEtBQVA7RUFDRCxDQWpHMkMsQ0FrRzVDOzs7RUFDQSxPQUFPQyxTQUFQO0FBQ0Q7O0FBRURXLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmQsNkJBQWpCIn0=
//# sourceMappingURL=findCurrentFiberUsingSlowPath.js.map